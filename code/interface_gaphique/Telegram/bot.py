import telebot
import mysql.connector
from mysql.connector import Error
import requests

# Token Telegram
TOKEN = '7734765252:AAG1zYgVpKJZlMh5TWS1frHRYin0a6Fq3Z4'
bot = telebot.TeleBot(TOKEN)

# Adresse IP de l'ESP32-CAM
ESP32_URL = "http://192.168.24.77"

# Connexion √† la base de donn√©es
def create_connection():
    try:
        connection = mysql.connector.connect(
            host='localhost',
            user='root',
            password='',
            database='ImageDB',
            connection_timeout=180,
            autocommit=True
        )
        if connection.is_connected():
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie.")
            return connection
        else:
            print("‚ùå La connexion √† la base de donn√©es a √©chou√©.")
            return None
    except Error as e:
        print(f"Erreur lors de la tentative de connexion : {e}")
        return None

# Commande /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    help_text = (
        "üëã Bienvenue sur le bot de gestion d'images !\n"
        "üì§ /upload - Envoyer une image dans la base de donn√©es.\n"
        "üîç /search - Afficher les images upload√©es et en choisir une.\n"
        "‚è∏Ô∏è /pause - Mettre en pause la recherche.\n"
        "‚ñ∂Ô∏è /resume - Reprendre la recherche.\n"
        "‚ùå /cancel - Annuler la recherche en cours.\n"
        "\nüí° Utilisez ces commandes pour g√©rer vos images et interagir avec le robot."
    )
    bot.send_message(message.chat.id, help_text)

# Commande /upload
@bot.message_handler(commands=['upload'])
def upload_image(message):
    bot.send_message(message.chat.id, "Veuillez envoyer une image.")

    @bot.message_handler(content_types=['photo'])
    def handle_image(received_message):
        connection = create_connection()
        cursor = connection.cursor()

        file_info = bot.get_file(received_message.photo[-1].file_id)
        file = requests.get(f'https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}')
        
        image_name = f"{received_message.photo[-1].file_id}.jpg"
        image_data = file.content

        try:
            cursor.execute("INSERT INTO images (image_name, image_data) VALUES (%s, %s)", (image_name, image_data))
            connection.commit()
            bot.send_message(received_message.chat.id, "‚úÖ Image upload√©e avec succ√®s !")
        except Error as e:
            bot.send_message(received_message.chat.id, f"‚ùå Erreur lors de l'upload : {e}")
        finally:
            cursor.close()
            connection.close()

# Commande /search
@bot.message_handler(commands=['search'])
def list_images(message):
    connection = create_connection()

    if connection is None:
        bot.send_message(message.chat.id, "‚ùå Impossible de se connecter √† la base de donn√©es.")
        return

    try:
        cursor = connection.cursor()
        cursor.execute("SELECT id, date_uploaded FROM images")
        results = cursor.fetchall()

        if results:
            bot.send_message(message.chat.id, "üîç Images disponibles :")
            for row in results:
                image_id, date_uploaded = row
                bot.send_message(message.chat.id, f"ID: {image_id}\nDate: {date_uploaded}")

            bot.send_message(message.chat.id, "‚úèÔ∏è Envoyez l'ID de l'image √† transf√©rer au robot.")

            @bot.message_handler(func=lambda msg: msg.text.isdigit())
            def send_image_to_robot(msg):
                image_id = int(msg.text)
                cursor.execute("SELECT image_data FROM images WHERE id = %s", (image_id,))
                result = cursor.fetchone()

                if result:
                    image_data = result[0]
                    files = {'file': image_data}
                    try:
                        response = requests.post(f"{ESP32_URL}/upload", files=files)
                        if response.status_code == 200:
                            bot.send_message(msg.chat.id, "‚úÖ Image transf√©r√©e au robot.")
                        else:
                            bot.send_message(msg.chat.id, "‚ùå √âchec du transfert.")
                    except Exception as e:
                        bot.send_message(msg.chat.id, f"‚ùå Erreur : {e}")
                else:
                    bot.send_message(msg.chat.id, f"‚ö†Ô∏è Aucune image trouv√©e avec l'ID {image_id}.")
    except Error as e:
        bot.send_message(message.chat.id, f"‚ùå Erreur lors de la recherche : {e}")
    finally:
        cursor.close()
        connection.close()

# Commandes pour les signaux
@bot.message_handler(commands=['pause'])
def pause_signal(message):
    try:
        requests.get(f"{ESP32_URL}/pause")
        bot.send_message(message.chat.id, "‚è∏Ô∏è Signal de pause envoy√© au robot.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Erreur : {e}")

@bot.message_handler(commands=['resume'])
def resume_signal(message):
    try:
        requests.get(f"{ESP32_URL}/resume")
        bot.send_message(message.chat.id, "‚ñ∂Ô∏è Signal de reprise envoy√© au robot.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Erreur : {e}")

@bot.message_handler(commands=['cancel'])
def cancel_signal(message):
    try:
        requests.get(f"{ESP32_URL}/cancel")
        bot.send_message(message.chat.id, "‚ùå Signal d'annulation envoy√© au robot.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Erreur : {e}")

# D√©marrer le bot
bot.polling()
