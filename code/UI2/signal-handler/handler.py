import signal
import time
import sys
import os

# Variable globale pour suivre l'√©tat du programme
program_state = "IDLE"

def save_program_pid():
    """Enregistrer le PID du programme dans un fichier"""
    try:
        pid = os.getpid()  # R√©cup√®re le PID du processus en cours
        with open("program_pid.txt", "w") as pid_file:
            pid_file.write(str(pid))  # Enregistre le PID dans le fichier
        print(f"‚úÖ Le PID du programme a √©t√© enregistr√© dans program_pid.txt : {pid}")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'enregistrement du PID : {e}")

def handle_start(signum, frame):
    """D√©marrer le programme"""
    global program_state
    if program_state in ["IDLE", "PAUSED"]:
        program_state = "RUNNING"
        print("üöÄ Programme d√©marr√©.")
    else:
        print("‚ö†Ô∏è Le programme est d√©j√† en cours d'ex√©cution.")

def handle_pause(signum, frame):
    """Mettre le programme en pause"""
    global program_state
    if program_state == "RUNNING":
        program_state = "PAUSED"
        print("‚è∏Ô∏è Programme mis en pause.")
    else:
        print("‚ö†Ô∏è Impossible de mettre en pause. √âtat actuel :", program_state)

def handle_resume(signum, frame):
    """Reprendre le programme"""
    global program_state
    if program_state == "PAUSED":
        program_state = "RUNNING"
        print("‚ñ∂Ô∏è Programme repris.")
    else:
        print("‚ö†Ô∏è Impossible de reprendre. √âtat actuel :", program_state)

def handle_cancel(signum, frame):
    """Annuler le programme"""
    global program_state
    program_state = "IDLE"
    print("‚ùå Programme annul√©. Retour √† l'√©tat initial.")

def handle_bip(signum, frame):
    """Effectuer un bip ou signal sonore"""
    print("üîî BIP - Signal sonore activ√©.")

# Associer les signaux aux fonctions
signal.signal(signal.SIGUSR1, handle_start)  # Signal START
signal.signal(signal.SIGUSR2, handle_pause)  # Signal PAUSE
signal.signal(signal.SIGINT, handle_resume)  # Signal RESUME
signal.signal(signal.SIGTERM, handle_cancel)  # Signal CANCEL
signal.signal(signal.SIGALRM, handle_bip)    # Signal BIP

def main_loop():
    """Boucle principale du programme"""
    global program_state
    print("üîÑ Programme en attente de signaux... (√âtat : IDLE)")
    try:
        while True:
            if program_state == "RUNNING":
                print("üöÄ Programme en cours d'ex√©cution...")
                time.sleep(2)  # Simule un travail actif
            elif program_state == "PAUSED":
                print("‚è∏Ô∏è Programme en pause. En attente de reprise...")
                time.sleep(2)
            elif program_state == "IDLE":
                time.sleep(1)
    except KeyboardInterrupt:
        print("\nüõë Programme termin√© manuellement.")
        sys.exit(0)

if __name__ == "__main__":
    save_program_pid()  # Enregistre le PID d√®s le d√©marrage
    main_loop()
